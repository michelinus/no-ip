#!/usr/bin/expect -f

#*********************************************
#                 functions

proc Multiple_Network_Devices {default_adapter} {
  
  set choice -1
  set hosts -1

  puts "default adapter : \[$default_adapter\]"

  expect {
    "*Multiple network devices have been detected"           {  }  
    }

  expect {
    "*By typing the number associated with it." { }
    }

  # When all adapters are parsed the input buffer will be empty and a timeout will occur, which will # end the while loop
  while { 1 } {  

      #read adapter's id
      expect {
        -re {([0-9]*)\t} {}
        timeout  { 
                    puts "Timeout, network adapter not found" 
                    exit 1
                }
      }
      set id $expect_out(1,string)

      #read adapter's name
      expect {
        -re {\r\n} {}
      }
      set adapter $expect_out(buffer)
      # remove \r\n from the end
      set adapter [ exec echo $adapter | tr -d '\r\n']
      puts "id : \[$id\]  adapter name : \[$adapter\]"


      #check if this is the default adapter
      if {$adapter == $default_adapter} {
        set choice $id
        break
      }
  }

  if {$choice > -1} {
    puts "Selecting # $choice";
    send -- "$choice\r"
  }

}

proc Multiple_Hosts {hosts domains} {

  #puts "\nmultiple hosts \[$hosts\]"

  expect  "*Do you wish to have them all updated" {  send -- "n"  }

  # for each available domain checks if it should be enabled for updates
  while { $hosts > 0 } {
                      
      expect -exact "Do you wish to have host \["

      # extract domain
      expect {
        -re {([a-zA-Z0-9\-]*\.)*[a-zA-Z0-9]*} { set check_domain $expect_out(0,string); puts "domain : \{$check_domain\}"}
      }

      expect -exact "\] updated?\[N\] (y/N)  "  

      #checks if the check_domain is in the list with the domains that should be updated
      set choice "n"
      foreach domain $domains {

        #puts "\[$domain\]"
        #puts "\[$check_domain\]"

        if {$domain == $check_domain} {
          set choice "y"
          break
        }
      }
      send -- "$choice"

      set hosts [expr $hosts - 1]
  }
}


#*********************************************



puts "***********************************"
puts "**         Configuration         **"
puts "***********************************"

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

set username [lindex $argv 0]
set password [lindex $argv 1]
set interval [lindex $argv 3]

#seperate domains based on spaces and put it in a list
set tmp [lindex $argv 2]
set domains  [split $tmp]

puts "username $username"
puts "password $password"
puts "domains $domains"
puts "interval $interval"

set scripts_dir /scripts
#set scripts_dir .
#-----------------------------------------------------------------------------   -----

# find which adapter is used to access the internet
set default_adapter [exec $scripts_dir/get_adapter_name.sh]

# find how many adapters are available
set adapters_cnt [exec $scripts_dir/get_adapter_number.sh]
puts "Found $adapters_cnt adapters"

set timeout 10
spawn noip2 -C -c /config/no-ip2.conf
match_max 100000


expect {
  "*Auto configuration for Linux client of no-ip.com." {  }
}

#handle multiple network adapters
if { $adapters_cnt > 1} {
  Multiple_Network_Devices $default_adapter
}

expect -exact "Please enter the login/email string for no-ip.com  "             { send -- "$username\r"}


expect -exact "$username\r\nPlease enter the password for user '$username'  "   {send -- "$password\r" }

expect -exact "Please enter an update interval:\[30\]  " { send -- "$interval\r" }

expect {
    -exact "\r\nDo you wish to run something at successful update?\[N\] (y/N)  " { send -- "n" } 
}
expect eof
